import schedule
import time
import asyncio
import subprocess
from telegram_bot import JobTelegramBot
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

def run_communication_jobs():
    """Scrape et envoie les offres de communication"""
    print("üéØ Lancement des offres communication...")
    
    # Scrape les offres de communication (version stealth en priorit√©)
    result = subprocess.run(['python', 'flemme_communication_stealth.py'], capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Erreur scraping communication: {result.stderr}")
        return
    
    # Envoie sur Telegram
    result = subprocess.run(['python', 'bot_communication.py'], capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Erreur envoi communication: {result.stderr}")
    else:
        print("‚úÖ Offres communication envoy√©es")

def run_design_jobs():
    """Scrape et envoie les offres de design"""
    print("üé® Lancement des offres design...")
    
    # Scrape les offres de design (version stealth en priorit√©)
    result = subprocess.run(['python', 'flemme_design_stealth.py'], capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Erreur scraping design: {result.stderr}")
        return
    
    # Envoie sur Telegram
    result = subprocess.run(['python', 'bot_design.py'], capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Erreur envoi design: {result.stderr}")
    else:
        print("‚úÖ Offres design envoy√©es")

# Schedule jobs pour communication (9h et 17h)
schedule.every().day.at("09:00").do(run_communication_jobs)
schedule.every().day.at("17:00").do(run_communication_jobs)

# Schedule jobs pour design (10h et 18h pour √©viter la surcharge)
schedule.every().day.at("10:00").do(run_design_jobs)
schedule.every().day.at("18:00").do(run_design_jobs)

print("ü§ñ Planificateur d√©marr√©.")
print("üìÖ Communication: 9h et 17h")
print("üé® Design: 10h et 18h")
print("\nüöÄ Ex√©cution imm√©diate pour tester...")

# Ex√©cute le flow complet une fois au d√©marrage
run_communication_jobs()
run_design_jobs()

print("\n‚è∞ Planification activ√©e. Appuyez sur Ctrl+C pour arr√™ter.")

while True:
    schedule.run_pending()
    time.sleep(60)
